generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model Assosiation {
    id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
    name    String @unique @db.VarChar(30)
    acronym String @db.VarChar(5)
    User    User[]
}

model User {
    id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
    username           String       @db.VarChar(10)
    name               String
    password           String
    role               Int          @db.SmallInt
    email              String
    usingAuthenticator Boolean      @default(false)
    active             Boolean      @default(true)
    assosiationId      String       @db.Char(36)
    assosiation        Assosiation  @relation(fields: [assosiationId], references: [id])
    emailToken         EmailToken[]
    towFactorApp       TwoFactorApp?
}

model EmailToken {
    id        String   @id @default(dbgenerated("gen_random_uuid()"))
    token     Int
    userId    String   @db.Char(36)
    endOfLive DateTime
    user      User     @relation(fields: [userId], references: [id])

    @@unique([token, userId])
}

model TwoFactorApp {
    id       String  @id @default(dbgenerated("gen_random_uuid()"))
    secret   String
    appName  String
    verified Boolean @default(false)
    userId   String  @unique @db.Char(36)
    user     User    @relation(fields: [userId], references: [id])
}

model LoginAttempt {
    id         String   @id @default(dbgenerated("gen_random_uuid()"))
    date       DateTime @default(now())
    ipAdress   String
    username   String
    acronym    String
    withToken  Boolean
    successful Boolean
    message    String
}
